unit Produto.Controller;

interface

uses
  IProduto.Service,
  Produto.Entity,
  Produto.Service,
  ServiceBase,
  DMDataModule,
  FireDAC.Comp.Client,
  System.SysUtils;

type
  TProdutoController = class(TInterfacedObject, IProdutoService)
  private
  public
    procedure FindAll(aMemTable: TFDMemTable);
    procedure FindByID(aMemTable: TFDMemTable; aID: Integer);
    function Insert(aProduto: TProdutoEntity): Boolean;
    function Update(aProduto: TProdutoEntity): Boolean;
    function Delete(aProduto: TProdutoEntity): Boolean;
    class function New: IProdutoService;

    function SumValues(X, Y: Integer): Integer;
  end;

implementation

{ TProdutoController }

function TProdutoController.Delete(aProduto: TProdutoEntity): Boolean;
var
  oServiceBase: TServiceBase<TProdutoEntity>;
begin
  { Regra de negócio }
  oServiceBase := TServiceBase<TProdutoEntity>.Create;
  try
    Result := oServiceBase.Delete(aProduto);
  finally
    oServiceBase.Free;
  end;
end;

procedure TProdutoController.FindAll(aMemTable: TFDMemTable);
var
  oServiceBase: TServiceBase<TProdutoEntity>;
begin
  { Regra de negócio }
  oServiceBase := TServiceBase<TProdutoEntity>.Create;
  try
    oServiceBase.FindAll(aMemTable);
  finally
    oServiceBase.Free;
  end;
end;

procedure TProdutoController.FindByID(aMemTable: TFDMemTable; aID: Integer);
var
  oServiceBase: TServiceBase<TProdutoEntity>;
begin
  { Regra de negócio }
  oServiceBase := TServiceBase<TProdutoEntity>.Create;
  try
    oServiceBase.FindByID(aMemTable, aID);
  finally
    oServiceBase.Free;
  end;
end;

function TProdutoController.Insert(aProduto: TProdutoEntity): Boolean;
var
  oServiceBase: TServiceBase<TProdutoEntity>;
begin
  if aProduto.CodigoBarra = '1234' then
    raise Exception.Create
      ('Não foi possível cadastrar um produto com este código de barras.');

  { Regra de negócio }
  oServiceBase := TServiceBase<TProdutoEntity>.Create;
  try
    Result := oServiceBase.Insert(aProduto);
  finally
    oServiceBase.Free;
  end;
end;

class function TProdutoController.New: IProdutoService;
begin
  Result := Self.Create;
end;

function TProdutoController.SumValues(X, Y: Integer): Integer;
begin
  Result := X + Y;
end;

function TProdutoController.Update(aProduto: TProdutoEntity): Boolean;
var
  oServiceBase: TServiceBase<TProdutoEntity>;
begin
  { Regra de negócio }
  oServiceBase := TServiceBase<TProdutoEntity>.Create;
  try
    Result := oServiceBase.Update(aProduto);
  finally
    oServiceBase.Free;
  end;
end;

end.
