unit ServiceBase;

interface

uses IServiceBase,
  SimpleInterface,
  SimpleDAO,
  SimpleAttributes,
  SimpleQueryFiredac,
  Produto.Entity,
  Data.DB;

type
  TServiceBase<T: class, constructor> = class(TInterfacedObject, IService<T>)
  private
    FParent: T;
  public
    constructor Create(Parent: T);
    class function New(Parent: T): IService<T>;
    function FindAll(): TDataSet;
    function FindByID(ADataSet: TDataSet): TDataSet;
    function Insert(): IService<T>;
    function Update(): IService<T>;
    function Delete(): IService<T>;
  end;

implementation

uses
  Produto.Service, System.SysUtils, DMDataModule, Main;

{ TServiceBase<T> }

constructor TServiceBase<T>.Create(Parent: T);
begin
  FParent := Parent;
end;

function TServiceBase<T>.Delete: IService<T>;
begin

end;

function TServiceBase<T>.FindAll(): TDataSet;
var
  Con: iSimpleQuery;
  DAOEntity: iSimpleDAO<TServiceBase<T>>;
  DataSource: TDataSource;
begin
  DataSource := TDataSource.Create(nil);

  try
    try
      Con := TSimpleQueryFiredac.New(DMData.FBConnection);
      DAOEntity := TSimpleDAO < TServiceBase < T >>.New(Con)
        .DataSource(DataSource).Find();

      Result := DataSource.DataSet;

    except
      on E: Exception do
        raise Exception.Create(E.Message);
    end;
  finally
    DataSource.Free;
  end;

end;

function TServiceBase<T>.FindByID(ADataSet: TDataSet): TDataSet;
begin

end;

function TServiceBase<T>.Insert: IService<T>;
begin

end;

class function TServiceBase<T>.New(Parent: T): IService<T>;
begin
  Result := Self.Create(Parent);
end;

function TServiceBase<T>.Update: IService<T>;
begin

end;

end.
